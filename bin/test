#!/usr/bin/env ruby

require "bundler/setup"
require "flash_find"
Bundler.setup(:default)

Thread.abort_on_exception = true

require 'benchmark'
require 'find'
require 'fast_find'

TESTDIRS = {
	'Maildir' => '/home/freaky/Maildir/.zfs/snapshot/replicate.yau.2015-08-29T17:43:38Z/.spam.high',
	'CVS' => '/cvs/netbsd/pkgsrc'
}

def count_files_flashfind(dir)
	entries = 0
	bytes = 0
	FlashFind.push(dir)
	         .prune {|entry| entry.directory? && entry.basename.to_s == '.git' }
	         .each do |entry|
	         	entries += 1
	         	bytes += entry.size if entry.file?
	end
	[entries, bytes]
end

def count_files_flashfind_concurrent(dir)
	entries = Concurrent::AtomicFixnum.new
	bytes = Concurrent::AtomicFixnum.new
	FlashFind.push(dir)
	         .prune {|entry| entry.directory? && entry.basename.to_s == '.git' }
	         .concurrent_each do |entry|
	         	entries.increment
	         	bytes.increment(entry.size) if entry.file?
	end
	[entries.value, bytes.value]
end

def count_files_find(dir)
	entries = 0
	bytes = 0
	Find.find(dir) do |path|
		stat = File.lstat(path)
		Find.prune if stat.directory? && File.basename(path) == '.git'

		entries += 1
		bytes += stat.size if stat.file?
	end
	[entries, bytes]
end

def count_files_fastfind(dir)
	entries = 0
	bytes = 0
	FastFind.find(dir) do |path, stat|
		FastFind.prune if stat.directory? && File.basename(path) == '.git'

		entries += 1
		bytes += stat.size if stat.file?
	end
	[entries, bytes]
end

counts = Hash.new
Benchmark.bmbm do |b|
	test = ->(method, name, &action) do
		b.report(name) do
			counts[name] = yield
		end
	end

	methods = {
		'FlashFind'       => ->(dir) { count_files_flashfind(dir) },
		'FlashFind#peach' => ->(dir) { count_files_flashfind_concurrent(dir) },
		'FastFind'        => ->(dir) { count_files_fastfind(dir) },
		'Find'            => ->(dir) { count_files_find(dir) }
	}

	TESTDIRS.each do |type, dir|
		methods.each do |meth, action|
			name = "#{meth}(#{type})"
			b.report(name) do
				counts[name] = action.call(dir)
			end
		end
	end
end

at_exit do
	diffs = Hash[counts.group_by {|k,v| v }.map {|k,v| [k, v.map(&:first)] }]
	if diffs.size > 2
		puts "Unequal counts: #{diffs}"
	else
		diffs.each do |files_bytes, names|
			puts "%d files in %d bytes: %s" % [*files_bytes, names.join(', ')]
		end
		# diffs.each do |group, names|
		# 	names.each do |name|
		# 	files, bytes = diffs.keys.first
		# 	puts "Counted #{files} files and #{bytes} bytes"
		# end
		# end
	end
end
